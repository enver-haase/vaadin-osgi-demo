package org.vaadin.osgi.demo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.osgi.framework.ServiceReference;
import org.osgi.util.tracker.ServiceTracker;
import org.osgi.util.tracker.ServiceTrackerCustomizer;
import org.vaadin.osgi.bridge.uifragments.FragmentFactory;
import org.vaadin.osgi.demo.layouts.AbstractSlotLayout;
import org.vaadin.osgi.demo.layouts.FourSlotLayout;
import org.vaadin.osgi.demo.layouts.FourSlotLayoutWithDock;
import org.vaadin.osgi.demo.layouts.SlotDropHandler;
import org.vaadin.osgi.demo.layouts.TwoSlotLayout;

import com.vaadin.annotations.Theme;
import com.vaadin.annotations.Widgetset;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.server.VaadinRequest;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;

import fi.jasoft.dragdroplayouts.DDHorizontalLayout;
import fi.jasoft.dragdroplayouts.client.ui.LayoutDragMode;

/** Demo for building a vaadin ui that accepts ui fragments from osgi bundles. Adapted from https://github.com/vaadin/osgi-bridge-and-fragmentedui-demo
 * 
 * @author mjhosio
 *
 */
@Theme("demo")
@SuppressWarnings("serial")
public class VaadinOSGiUI extends UI implements
		ServiceTrackerCustomizer<FragmentFactory, FragmentFactory> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5043459045625549368L;

	// registry between service reference and components created by it
	private Map<ServiceReference<FragmentFactory>, List<Component>> componentRegistry = new HashMap<>();
	// root layout
	private VerticalLayout rootLayout;
	// draggable labels for registered bundles
	private DDHorizontalLayout bundles;
	// the layout containing the currently selected template
	private VerticalLayout template;
	
	@Override
	protected void init(VaadinRequest request) {
		// create root layout
		rootLayout=new VerticalLayout();
		rootLayout.setSizeFull();
		HorizontalLayout topBar=new HorizontalLayout();
		// create layout chooser
		topBar.setSpacing(true);
		ComboBox chooseLayout=createLayoutChooser();
		topBar.addComponent(chooseLayout);
		topBar.addComponent(new Label("Bundles: "));
		// create layout for added bundles
		bundles=new DDHorizontalLayout();
		bundles.setSpacing(true);
		bundles.setWidth("100%");
		bundles.setHeight(null);
		bundles.setDragMode(LayoutDragMode.CLONE);
		topBar.addComponent(bundles);
		rootLayout.addComponent(topBar);
		// create space for the actual layout for the fragments generated by the bundle
		template=new VerticalLayout();
		template.setSizeFull();
		TwoSlotLayout layout=new TwoSlotLayout();
		layout.setSlotDropHandler(new SlotDropHandlerImpl());
		template.addComponent(layout);
		rootLayout.addComponent(template);
		rootLayout.setExpandRatio(template, 1.0f);
		//init service tracker
		initServiceTracker();
		// start polling
		setPollInterval(1000);
		setContent(rootLayout);
	}
	
	private void initServiceTracker(){
		ServiceTracker<FragmentFactory, FragmentFactory> tracker = new ServiceTracker<FragmentFactory, FragmentFactory>(
				VaadinActivator.context, FragmentFactory.class, this);
		tracker.open();
		addDetachListener(new DetachListener() {
			@Override
			public void detach(DetachEvent event) {
				tracker.close();
			}
		});
	}
	
	/** Create the component for choosing layouts
	 * 
	 * @return
	 */
	private ComboBox createLayoutChooser() {
		ComboBox chooseLayout=new ComboBox("Choose layout");
		chooseLayout.setTextInputAllowed(false);
		chooseLayout.setNullSelectionAllowed(false);
		chooseLayout.addItem("two slots");
		chooseLayout.addItem("four slots");
		chooseLayout.addItem("four slots and dock");
		chooseLayout.setValue("two slots");
		chooseLayout.addValueChangeListener(new ValueChangeListener() {
			@Override
			public void valueChange(ValueChangeEvent event) {
				String value=(String) event.getProperty().getValue();
				template.removeAllComponents();
				AbstractSlotLayout layout=null;
				if(value.equals("two slots")){
					layout=new TwoSlotLayout();
				} else if(value.equals("four slots")){
					layout=new FourSlotLayout();
				} else if(value.equals("four slots and dock")){
					layout=new FourSlotLayoutWithDock();
				}
				template.addComponent(layout);
				layout.setSlotDropHandler(new SlotDropHandlerImpl());
				// get rid of existing components
				cleanRegisteredComponents();
			}
		});
		return chooseLayout;
	}

	private void addBundle(ServiceReference<FragmentFactory> reference){
		// register bundle
		FragmentFactory ff = VaadinActivator.context.getService(reference);
		if (ff != null) {
			componentRegistry.put(reference, new ArrayList<Component>());
			BundleLabel draggable=new BundleLabel(ff.getName(), reference);
			bundles.addComponent(draggable);
		}
		VaadinActivator.context.ungetService(reference);
	}
	
	private FragmentWrapper createFragment(ServiceReference<FragmentFactory> reference){
		FragmentWrapper fragment=null;
		// get factory
		FragmentFactory ff = VaadinActivator.context.getService(reference);
		if (ff != null) {
			// build fragment
			fragment = new FragmentWrapper(ff.getFragment());
			fragment.setCaption(ff.getName());
			componentRegistry.get(reference).add(fragment);
			// add it to layout
		} else {
			Notification.show("Excuse me, the view is not available any more");
		}
		VaadinActivator.context.ungetService(reference);
		return fragment;
	}
	
	private void removeBundle(ServiceReference<FragmentFactory> reference){
		for(Component c : componentRegistry.get(reference)){
			// handle component removal
			if(c.getParent()!=null){
				ComponentContainer parent=(ComponentContainer) c.getParent();
				parent.removeComponent(c);
			}
		}
		// clean up the service from component registry
		componentRegistry.get(reference).clear();
		componentRegistry.remove(reference);
		// and finally remove the BundleLabel
		Component target=null;
		for(Component c : bundles){
			BundleLabel label = (BundleLabel) c;
			if(label.getReference().equals(reference)){
				target=label;
				break;
			}
		}
		bundles.removeComponent(target);
	}
	
	private void cleanRegisteredComponents() {
		for(List<Component> components : componentRegistry.values()){
			components.clear();
		}
	}


	@Override
	public FragmentFactory addingService(
			ServiceReference<FragmentFactory> reference) {
		FragmentFactory ff = VaadinActivator.context.getService(reference);
		addBundle(reference);
		return ff;
	}
	
	@Override
	public void modifiedService(ServiceReference<FragmentFactory> reference,
			FragmentFactory service) {
		;// no-op
	}

	@Override
	public void removedService(ServiceReference<FragmentFactory> reference,
			FragmentFactory service) {
		removeBundle(reference);
	}
	
	private class SlotDropHandlerImpl implements SlotDropHandler{
		@Override
		public Component getReplacement(Component dropped) {
			if(bundles.getComponentIndex(dropped)>=0){
				BundleLabel bundleLabel=(BundleLabel) dropped;
				return createFragment(bundleLabel.getReference());
			}
			return null;
		}

		@Override
		public void componentRemoved(Component component) {
			// try to remove the component from the registry
			for(List<Component> components : componentRegistry.values()){
				components.remove(component);
			}
		}

	}
}
